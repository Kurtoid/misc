#!/bin/bash
timesheet=${TIMESHEET:-$HOME/timesheet}

CMD=$1
shift 

num=$(tail -1 $timesheet|wc -w)
if [[ $num -eq 1 ]]; then
    state="in"
elif [[ $num -eq 2 ]] || [[ $num -eq 0 ]]; then
    state="out"
else
    echo "Invalid Timesheet" >&2
    exit 1
fi
        
case $CMD in
    "")
        echo "Timesheet - Clocked $state"
        total=0
        while read line; do
            [[ -n "$line" ]] || continue;

            fields=($line)
            in=${fields[0]}
            in_text="$(date --date=@$in +'%R')"
            out=${fields[1]}
            if [[ -z "$out" ]]; then
                out=$(date +"%s")
                out_text="now"
            else
                out_text="$(date --date=@$out +'%R')"
            fi

            newdate=$(date --date="@$in" +"%A, %B %d %Y")
            if [[ "$newdate" != "$cdate" ]]; then
                if [[ -n "$cdate" ]]; then
                    hrs=$(bc <<< "scale=2; $total/3600")
                    echo "Total: $hrs"
                fi
                total=0
                cdate=$newdate
                echo -e "\n$cdate"
            fi

            echo "  $in_text - $out_text"
            total=$(( $total + $out - $in ))
        done < <(sort -n < $timesheet)
        hrs=$(bc <<< "scale=2; $total/3600")
        echo "Total: $hrs"
        exit 0
        ;;
    in)
        if [[ "$state" != "out" ]]; then
            echo "You haven't clocked out yet." >&2
            exit 1
        fi
        ;;
    out)
        if [[ "$state" != "in" ]]; then
            echo "You haven't clocked in yet." >&2
            exit 1
        fi
        ;;
    *)
        echo "Invalid command" >&2
        exit 1
        ;;
esac

if [[ $# -eq 0 ]]; then
    date=$(date +'%s')
else
    date=$(date +'%s' -d "$*")
    if [[ $? -ne 0 ]]; then
        exit 1
    fi
fi

case $CMD in
    out)
        sed "\$s/\$/& $date/" -i $timesheet
        ;;
    in)
        echo "$date" >> $timesheet
        ;;
esac
echo "Clocked $CMD at $(date --date=@$date)"
